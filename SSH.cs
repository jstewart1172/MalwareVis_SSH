using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Renci.SshNet;


namespace Interactive_SSH
{
	class SSH
	{
		// Static variables
		private static byte[] _data = new byte[2048];   // container for data received from the stream
		private static ShellStream stream;              // ShellStream object used to communicate with the Linux terminal
		private static SshClient client;                // SshClient object used to create a connection and stream
		private static MyAsyncInfo info;                // unique class containing information obtained from an asynchronous read

		// constructor that initializes the client object and creates a connection to the remote terminal
		public SSH(string IP, string user, string pass)
		{
			// initilizes client object containing server information
			client = new SshClient (IP, user, pass);

			// connects to the server
			client.Connect ();

			// creates a stream to communicate with the remote terminal
			stream = client.CreateShellStream (@"xterm", 80, 24, 800, 600, 2048);
		}
		
		public void SendCommand(string cmd)
		{
			//flush buffer
			stream.Flush();

			// This loop continually checks for data from the remote terminal
			while(true)
			{
				// when data is received, the StartAsyncRead function is called
				stream.DataReceived += StartAsyncRead;

				// user input from the console is stored in the string variable cmd
				cmd = Console.ReadLine();

				// the command is then sent to the remote terminal and executes
				stream.WriteLine(cmd);
			}
		}

		// returns current instance of the MyAsyncInfo class
		public MyAsyncInfo Retrieve()
		{
			return info;
		}

		// initiates an asynchronous read from the stream
		private static void StartAsyncRead(object sender, EventArgs e)
		{
			try
			{
				// reads from the stream
				stream.BeginRead(_data, 0, _data.Length, OnReadCompletion, new MyAsyncInfo(_data, stream));
			}
			catch (Exception exception)
			{
				Console.WriteLine(exception);
			}
		}

		// callback function - executes on read completion
		private static void OnReadCompletion(IAsyncResult ar)
		{
			try
			{
				var mai = (MyAsyncInfo)ar.AsyncState;
				int datalen = mai.Stream.EndRead(ar);
				string line = client.ConnectionInfo.Encoding.GetString(mai.ByteArray, 0, datalen);
				//line = getBetween(line, "f[0K", "[2K");
				//Console.Write(line);
				info += line;
			}
			catch (Exception exception)
			{
				//Console.WriteLine(exception);
			}
		}

		// class containing stream data
		public class MyAsyncInfo
		{
			public MyAsyncInfo(Byte[] array, ShellStream stream)
			{
				ByteArray = array;
				Stream = stream;
			}
			
			public Byte[] ByteArray { get; set; }
			public ShellStream Stream { get; set; }
		}

		// function to parse the incoming data -- returns everything between the parameter strings
		private static string getBetween(string strSource, string strStart, string strEnd)
		{
			int Start, End;
			if (strSource.Contains(strStart) && strSource.Contains(strEnd))
			{
				Start = strSource.IndexOf(strStart, 0) + strStart.Length;
				End = strSource.IndexOf(strEnd, Start);
				return strSource.Substring(Start, End - Start);
			}
			else
			{
				return "";
			}
		}
	}
}